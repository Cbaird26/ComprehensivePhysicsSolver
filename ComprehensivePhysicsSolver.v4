from flask import Flask, request, jsonify
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
from flask_sqlalchemy import SQLAlchemy
import numpy as np
import scipy as sp
from scipy.constants import e, m_e, hbar, G, c, k
import plotly.graph_objects as go
from astropy.cosmology import Planck18 as cosmo
from sklearn.linear_model import LinearRegression
import joblib

app = Flask(__name__)
app.config['JWT_SECRET_KEY'] = 'your_secret_key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///simulations.db'
jwt = JWTManager(app)
db = SQLAlchemy(app)

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)

class SimulationResult(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    simulation_type = db.Column(db.String(80), nullable=False)
    parameters = db.Column(db.Text, nullable=False)
    result = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())

db.create_all()

@app.route('/register', methods=['POST'])
def register():
    username = request.json.get('username')
    password = request.json.get('password')
    if User.query.filter_by(username=username).first():
        return jsonify({"msg": "Username already exists"}), 400
    new_user = User(username=username, password=password)
    db.session.add(new_user)
    db.session.commit()
    return jsonify({"msg": "User registered successfully"}), 200

@app.route('/login', methods=['POST'])
def login():
    username = request.json.get('username')
    password = request.json.get('password')
    user = User.query.filter_by(username=username, password=password).first()
    if user:
        access_token = create_access_token(identity=username)
        return jsonify(access_token=access_token)
    return jsonify({"msg": "Bad username or password"}), 401

# Simulation functions
def schrodinger_equation(psi, x, potential, mass=m_e, hbar=hbar):
    psi_da = np.gradient(psi, x)
    d2psi_dx2 = np.gradient(psi_da, x)
    return -(hbar**2 / (2 * mass)) * d2psi_dx2 + potential(x) * psi

def heisenberg_uncertainty(delta_x, delta_p):
    return delta_x * delta_p >= hbar / 2

def einstein_field_equations(T_mu_nu):
    G_mu_nu = 8 * np.pi * G * T_mu_nu
    return G_mu_nu

def newtons_second_law(mass, acceleration):
    return mass * acceleration

def harmonic_oscillator(mass, k, x0, v0, t):
    omega = np.sqrt(k / mass)
    A = np.sqrt(x0**2 + (v0 / omega)**2)
    phi = np.arctan2(v0 / omega, x0)
    return A * np.cos(omega * t - phi)

def first_law_thermodynamics(delta_U, Q, W):
    return delta_U == Q - W

def maxwells_equations():
    return "Maxwell's Equations Solved"

def lorentz_force(q, E, v, B):
    return q * (E + np.cross(v, B))

def partition_function(energy_levels, temperature):
    beta = 1 / (k * temperature)
    Z = np.sum(np.exp(-beta * energy_levels))
    return Z

def radioactive_decay(N0, lambda_, t):
    return N0 * np.exp(-lambda_ * t)

def hubbles_law(H0, distance):
    return H0 * distance

def drude_model(electric_field, tau, n, e=e, m=m_e):
    conductivity = n * e**2 * tau / m
    current_density = conductivity * electric_field
    return current_density

def snells_law(n1, n2, theta1):
    theta1 = np.radians(theta1)
    theta2 = np.arcsin(n1 / n2 * np.sin(theta1))
    return np.degrees(theta2)

def lambda_cdm_model(H0, Omega_m, Omega_Lambda, z):
    return H0 * np.sqrt(Omega_m * (1 + z)**3 + Omega_Lambda)

def dark_matter_density_profile(rho_0, r_s, r):
    return rho_0 / ((r / r_s) * (1 + r / r_s)**2)

def wave_equation(amplitude, wavelength, frequency, x, t):
    k = 2 * np.pi / wavelength
    omega = 2 * np.pi * frequency
    return amplitude * np.sin(k * x - omega * t)

# Train and save a simple model (example)
def train_ml_model():
    X = np.array([[1], [2], [3], [4], [5]])
    y = np.array([1, 2, 3, 4, 5])
    model = LinearRegression().fit(X, y)
    joblib.dump(model, 'model.pkl')

# Load and use the model
def predict_with_ml_model(data):
    model = joblib.load('model.pkl')
    return model.predict(np.array(data).reshape(-1, 1))

@app.route('/simulate', methods=['POST'])
@jwt_required()
def simulate():
    data = request.json
    simulation_type = data.get('simulation_type')
    params = data.get('params', {})
    current_user = get_jwt_identity()

    if simulation_type == 'schrodinger':
        x = np.linspace(0, 10, 100)
        psi = np.sin(x)
        potential = lambda x: 0.5 * m_e * (x**2)
        result = schrodinger_equation(psi, x, potential)
        return jsonify({'result': result.tolist()})
    
    elif simulation_type == 'heisenberg':
        delta_x = params.get('delta_x', 1e-10)
        delta_p = hbar / (2 * delta_x)
        result = heisenberg_uncertainty(delta_x, delta_p)
        return jsonify({'result': result})
    
    elif simulation_type == 'einstein':
        T_mu_nu = np.random.rand(4, 4)
        result = einstein_field_equations(T_mu_nu)
        return jsonify({'result': result.tolist()})
    
    elif simulation_type == 'newton':
        mass = params.get('mass', 10)
        acceleration = params.get('acceleration', 9.81)
        result = newtons_second_law(mass, acceleration)
        return jsonify({'result': result})
    
    elif simulation_type == 'harmonic_oscillator':
        mass = params.get('mass', 1.0)
        k = params.get('k', 1.0)
        x0 = params.get('x0', 1.0)
        v0 = params.get('v0', 0.0)
        t = np.linspace(0, 10, 100)
        result = harmonic_oscillator(mass, k, x0, v0, t)
        return jsonify({'result': result.tolist()})
    
    elif simulation_type == 'first_law':
        delta_U = params.get('delta_U', 100)
        Q = params.get('Q', 150)
        W = params.get('W', 50)
        result = first_law_thermodynamics(delta_U, Q, W)
        return jsonify({'result': result})
    
    elif simulation_type == 'maxwell':
        result = maxwells_equations()
        return jsonify({'result': result})
    
    elif simulation_type == 'lorentz':
        q = params.get('q', 1.6e-19)
        E = np.array(params.get('E', [1e5, 0, 0]))
        v = np.array(params.get('v', [0, 1e6, 0]))
        B = np.array(params.get('B', [0, 0, 1]))
        result = lorentz_force(q, E, v, B)
        return jsonify({'result': result.tolist()})
    
    elif simulation_type == 'partition_function':
        energy_levels = np.array(params.get('energy_levels', [0, 1, 2, 3]))
        temperature = params.get('temperature', 300)
        result = partition_function(energy_levels, temperature)
        return jsonify({'result': result})
    
    elif simulation_type == 'radioactive_decay':
        N0 = params.get('N0', 1000)
        lambda_ = params.get('lambda_', 0.693)
        t = params.get('t', 10)
        result = radioactive_decay(N0, lambda_, t)
        return jsonify({'result': result})
    
    elif simulation_type == 'hubble':
        H0 = params.get('H0', 70)
        distance = params.get('distance', 1e6)
        result = hubbles_law(H0, distance)
        return jsonify({'result': result})
    
    elif simulation_type == 'drude':
        electric_field = params.get('electric_field', 1e5)
        tau = params.get('tau', 1e-14)
        n = params.get('n', 1e28)
        result = drude_model(electric_field, tau, n)
        return jsonify({'result': result})
    
    elif simulation_type == 'snell':
        n1 = params.get('n1', 1.0)
        n2 = params.get('n2', 1.5)
        theta1 = params.get('theta1', 30)
        result = snells_law(n1, n2, theta1)
        return jsonify({'result': result})
    
    elif simulation_type == 'lambda_cdm':
        H0 = params.get('H0', 70)
        Omega_m = params.get('Omega_m', 0.3)
        Omega_Lambda = params.get('Omega_Lambda', 0.7)
        z = np.linspace(0, 10, 100)
        result = lambda_cdm_model(H0, Omega_m, Omega_Lambda, z)
        return jsonify({'result': result.tolist()})
    
    elif simulation_type == 'dark_matter':
        rho_0 = params.get('rho_0', 0.3)
        r_s = params.get('r_s', 1.0)
        r = np.linspace(0.1, 10, 100)
        result = dark_matter_density_profile(rho_0, r_s, r)
        return jsonify({'result': result.tolist()})
    
    elif simulation_type == 'wave_equation':
        amplitude = params.get('amplitude', 1.0)
        wavelength = params.get('wavelength', 1.0)
        frequency = params.get('frequency', 1.0)
        x = np.linspace(0, 10, 100)
        t = np.linspace(0, 10, 100)
        result = wave_equation(amplitude, wavelength, frequency, x, t)
        return jsonify({'result': result.tolist()})
    
    else:
        return jsonify({'error': 'Invalid simulation type'}), 400

    simulation_result = SimulationResult(
        user_id=User.query.filter_by(username=current_user).first().id,
        simulation_type=simulation_type,
        parameters=str(params),
        result=str(result)
    )
    db.session.add(simulation_result)
    db.session.commit()

    return jsonify({'status': 'Simulation complete', 'result': result})

@app.route('/get_simulations', methods=['GET'])
@jwt_required()
def get_simulations():
    current_user = get_jwt_identity()
    user = User.query.filter_by(username=current_user).first()
    simulations = SimulationResult.query.filter_by(user_id=user.id).all()
    return jsonify([{
        'simulation_type': sim.simulation_type,
        'parameters': sim.parameters,
        'result': sim.result
    } for sim in simulations])

@app.route('/predict', methods=['POST'])
def predict():
    data = request.json.get('data')
    prediction = predict_with_ml_model(data)
    return jsonify({'prediction': prediction.tolist()})

if __name__ == '__main__':
    train_ml_model()  # Ensure the model is trained before running the app
    app.run(debug=True)
